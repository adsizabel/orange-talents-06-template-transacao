#MySQL
spring.datasource.url=${MYSQL_URL:jdbc:mysql://localhost:3306/transacao}
spring.datasource.username=${MYSQL_USER:root}
spring.datasource.password=${MYSQL_PASSWORD:12345}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

#ACTUATOR #PROMETHEUS
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=info, health, metrics, prometheus
info.app.name=@project.name@
info.app.version=@project.version@
info.app.description=@project.description@
info.app.encoding=@project.build.sourceEncoding@
info.app.java.version=@java.version@

management.endpoint.health.status.http-mapping.up=200
management.endpoint.health.status.http-mapping.down=500
management.endpoint.health.status.http-mapping.out_of_service=503
management.endpoint.health.status.http-mapping.warning=500
management.endpoint.health.status.http-mapping.fatal=503

management.endpoints.prometheus.enabled=true
management.metrics.tags.aplicacao=${info.app.name:api-transacao}
management.metrics.tags.ambiente=${AMBIENTE:desenvolvimento}

#Spring Security - Keycloak
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:18080/auth/realms/transacao
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:18080/auth/realms/transacao/protocol/openid-connect/certs

# Jaeger
opentracing.jaeger.enabled=${JAEGER_ENABLED:true}
opentracing.jaeger.service-name=${info.app.name:api-transacao}
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT:http://localhost:14268/api/traces}
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:1}

# Kafka

spring.kafka.bootstrap-servers=${KAFKA_HOST:localhost:9092}
# Formato da chave (String) recebida!
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# Formato da mensagem \ evento (JSON) recebida(o)!
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# Identificador do grupo de consumo
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP_ID:minha-aplicacao}
# Modelo de coleta do consumidor (latest, earliest, none)
spring.kafka.consumer.auto-offset-reset=${KAFKA_AUTO-OFFSET-RESET:latest}
spring.kafka.topic.transactions=transacoes